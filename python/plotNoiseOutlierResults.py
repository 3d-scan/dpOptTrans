import numpy as np
import os.path
import json, re, argparse, sys
import matplotlib as mpl
import matplotlib.pyplot as plt
from js.utils.plot.colors import colorScheme

mpl.rc('font',size=30) 
mpl.rc('lines',linewidth=3.)
figSize = (14, 5.5)
figSize = (14, 10)
figSize = (12, 8)
figSize = (20, 8)
c1 = colorScheme("labelMap")["turquoise"]
c2 = colorScheme("labelMap")["orange"]
c3 = colorScheme("labelMap")["red"]

parser = argparse.ArgumentParser(description = 'plot results from results.json files generated by randomRenderAndCompare.py')
parser.add_argument('-i','--input',
    default="/data/vision/fisher/expres1/jstraub/optRotTransCVPR2017_bunny/", help='path to results folder')
#    default="/media/jstraub/research/dpOptTrans/", help='path to results folder')
#    default="/home/jstraub/CloudStation/research/dpOptTrans/", help='path to results folder')
#    default="../optRotTrans/", help='path to results folder')
cmdArgs = parser.parse_args()

name = "[a-z_0-9]+_[0-9]+_results.json"

results = []
for root, dirs, files in os.walk(cmdArgs.input):
  for f in files:
    if re.search(name, f):    
      results.append(os.path.join(root,f))
  break # don recurse into subfolders

version = "4.2"

errors = {"err_a":{}, "err_t":{}, "dt":{}, "Ks":{}, "overlap":[], "dangle":[],
    "noise":[], "outlier":[],
  "dtranslation":[]}
errTypes = ["err_a", "err_t", "dt", "Ks"]
counter = 0
numRejected = dict()
for result in results:
  r = json.load(open(result))
  if r['version'] == version:
#    print result
    errors["overlap"].append(r['GT']['overlap'])
    errors["noise"].append(r['GT']['noiseStd']/0.01)
    errors["outlier"].append(r['GT']['outlier'])
#    dang = 2.*np.arccos(r['GT']['q'][0]) *180/np.pi
#    errors["dangle"].append(dang)
#    errors["dtranslation"].append(np.sqrt((np.array(r['GT']['t'])**2).sum()))
    errors["dangle"].append(r['GT']['dangle'])
    errors["dtranslation"].append(r['GT']['dtranslation'])
    # enforce that all values of one scene be non nan
#    isnotnan = True
#    for algKey, val in r.iteritems():
#      if not algKey in ["GT", "version", "ICP"]:
#        for i,typ in enumerate(errTypes):
#          if not typ in val:
#            continue
#          isnotnan = isnotnan and (not np.isnan(val[typ]).any())
#          if np.isnan(val[typ]).any():
#            if algKey in numRejected:
#              numRejected[algKey] += 1
#            else:
#              numRejected[algKey] = 1
#    if not isnotnan:
#      continue
    # collect the values
    for algKey, val in r.iteritems():
      if not algKey in ["GT", "version"]:
        for typ in errTypes:
          if not typ in val:
            continue
          if algKey in errors[typ]:
            errors[typ][algKey].append(val[typ])
          else:
            errors[typ][algKey] = [val[typ]]
    counter += 1 
#    if counter > 100:
#      break
totalRejected = 0
for key,val in numRejected.iteritems():
  totalRejected += val
print "Found {} valid and {} invalid result files. Found the following breakdown of invalid files:".format(counter, totalRejected)
for key,val in numRejected.iteritems():
  print "  {}: \t{}\t{}%".format(key, val, 100.*val/float(totalRejected+counter))

print "have the following algorithms: "
for key in errors["err_a"].iterkeys():
  print "  ", key

if counter == 0:
  print "No results found for version "+version
  sys.exit(0)

def PlotErrHist(x, y, delta):
  if x.size < 1:
    return
  ids = np.floor((x)/delta).astype(np.int)
  means = np.zeros(ids.max()+1)
  stds = np.zeros(ids.max()+1)
  data = []
  for i in range(ids.min(), ids.max()+1):
    if (ids==i).any():
      means[i] = np.mean(y[ids==i])
      stds[i] = np.std(y[ids==i])
      data.append(y[ids==i])
  plt.errorbar(np.arange(ids.max()+1)*delta,means,yerr=stds)

def PlotErrBoxPlot(x, y, delta, ax, showXTicks):
  if x.size < 1:
    return
  ids = np.floor((x)/delta).astype(np.int)
  data = []
  for i in range(ids.min(), ids.max()+1):
    if (ids==i).any():
      data.append(y[ids==i])
  bp = plt.boxplot(data)
#  plt.plot(x,y,'.', color=c1, alpha=0.3)
  # set xticks
  if showXTicks:
    ticks = np.floor((np.arange(ids.min(), ids.max()+1)+0.5)*delta).astype(np.int)
    if np.unique(ticks).size < ticks.size:
      ticks = np.floor((np.arange(ids.min(), ids.max()+1)+0.5)*delta*10.)/10.
    xtickNames = plt.setp(ax, xticklabels=ticks)
    plt.setp(xtickNames, rotation=45)
  else:
    plt.setp(ax.get_xticklabels(), visible=False) 
  for box in bp["boxes"]:
    box.set(color=c1)
    #box.set(facecolor=c1)
  for whisker in bp["whiskers"]:
    whisker.set(color=c1)
  for cap in bp["caps"]:
    cap.set(color=c1)
  for median in bp["medians"]:
    median.set(color=c2)
  for flier in bp["fliers"]:
    flier.set(color=c3, marker=".", alpha=0.15) #,s=6)

def TableErr(x, y, delta):
  if x.size < 1:
    return
  ids = np.floor((x)/delta).astype(np.int)
  data = []
  for i in range(ids.min(), ids.max()+1):
    if (ids==i).any():
      data.append(y[ids==i])
  ticks = np.floor((np.arange(ids.min(), ids.max()+2))*delta).astype(np.int)
  for i,d in enumerate(data):
    dSort = np.sort(d)
    median = dSort[dSort.size/2]
    if dSort.size % 2 == 0:
      median = 0.5*(dSort[dSort.size/2-1]+dSort[dSort.size/2])
    perc75 = dSort[int(np.floor(dSort.size*0.75))]
    perc90 = dSort[int(np.floor(dSort.size*0.9))]
    print "[{} {}]\t #: {}\t 50%: {:.2f}\t 75%: {:.2f}\t 90%: {:.2f}".format(
        ticks[i],ticks[i+1],dSort.size,median,perc75,perc90)

def PlotScatter(x, y, delta, ax, showXTicks):
  if x.size < 1:
    return
  plt.plot(x,y,'.', color=c1, alpha=0.3)
  # set xticks
  if not showXTicks:
    plt.setp(ax.get_xticklabels(), visible=False) 

def PlotErrDensity(x, y, deltax, ymax, deltay, ax, showXTicks):
  if x.size < 1:
    return
  idsx = np.floor((x)/deltax*0.5).astype(np.int)
#  idsy = np.floor((y)/deltay).astype(np.int)
#  density = np.zeros((int(np.floor(ymax/deltay))+1,
#    int(np.floor(x.max()/deltax*0.5))+1))
#  print density.shape
#  for i in range(idsx.min(), idsx.max()+1):
#    if (idsx==i).any():
#      for j in idsy[idsx==i]:
#        density[j, i] += 1.
#  density /= density.sum()
#  print density
#  plt.imshow(density, interpolation="nearest")

  from matplotlib.colors import LogNorm

  bins = ( int(np.floor(x.max()/deltax*0.5))+1), (int(np.floor(ymax/deltay))+1)
  plt.hist2d(x,y, bins=bins, range=[[x.min(),x.max()],[0.,ymax]],
      norm=LogNorm())
  # set xticks
#  if showXTicks:
#    ticks = np.floor((np.arange(idsx.min(), idsx.max()+1)+0.5)*deltax).astype(np.int)
#    if np.unique(ticks).size < ticks.size:
#      ticks = np.floor((np.arange(idsx.min(), idsx.max()+1)+0.5)*deltax*10.)/10.
#    xtickNames = plt.setp(ax, xticklabels=ticks)
#    plt.setp(xtickNames, rotation=45)
#  else:
#    plt.setp(ax.get_xticklabels(), visible=False) 

def WriteErrStats(x, y, delta):
  if x.size < 1:
    return
  ids = np.floor((x)/delta).astype(np.int)
  data = []
  for i in range(ids.min(), ids.max()+1):
    if (ids==i).any():
      data.append(y[ids==i])
  ticks = np.floor((np.arange(ids.min(), ids.max()+1)+0.5)*delta).astype(np.int)
  if np.unique(ticks).size < ticks.size:
    ticks = np.floor((np.arange(ids.min(), ids.max()+1)+0.5)*delta*10.)/10.
  for i,d in enumerate(data):
    mean = np.mean(d)
    std = np.std(d)
    dSorted = np.sort(d)
    median = d[d.size/2]
    ninetyP = d[int(np.floor(d.size*0.1))]
    tenP = d[int(np.floor(d.size*0.9))]
    print "{}: |.| {}\t{} +- {}\t median={}\t10% {}\t90% {}".format(ticks[i], d.size, mean, std,
        median, ninetyP, tenP)

errDesc = {"err_a":"$\Delta \\theta$ [deg]", 
    "err_t": "$\|\|\Delta t\|\|_2$ [m]", "dt":"dt [s]",
    "Ks1":"Ks", "Ks2":"Ks", "Ks3":"Ks", "Ks4":"Ks"}
errTypeMax = {"err_a": 90., "err_t": 0.2, "dt": 120.,
    "Ks1":30, "Ks2":30, "Ks3":30, "Ks4":30}
yMetricLabel={"overlap":"overlap [%]", "noise":"noise",
  "outlier":"outlier", "dangle":" $\Delta\\theta_{GT}$ [deg]",
  "dtranslation":"$\|\|\Delta t_{GT}\|\|_2$ [m]"}
yMetricResolution={"overlap":9, "dangle":8, "dtranslation":0.4}
yMetricResolution={"overlap":15, "dangle":12, "dtranslation":0.4, 
    "noise":1., "outlier":0.1}
#yMetricResolution={"overlap":15, "dangle":12, "dtranslation":0.4}

# eval of all algos against eachother
errTypes = ["err_a", "err_t"] #, "dt"]
algTypes = ["BB", "BB+ICP"]

if not "DISPLAY" in os.environ:
  sys.exit(0)

algDesc = {"BB_45.0_0.5":"BB45", "MM":"MoM"}
errTypeResolution = {"err_a": 5., "err_t": 0.2, "dt": 3.}

print algTypes
print errTypes

print len(errors["err_a"]["BB"])
print len(errors["noise"])

noises = np.sort(np.unique(errors["noise"]))
noiseQuant = {}
for i,n in enumerate(noises):
  noiseQuant[n] = i
outliers = np.sort(np.unique(errors["outlier"]))
outlierQuant = {}
for i,o in enumerate(outliers):
  outlierQuant[o] = i
print noises
print outliers

for algType in ["BB"]:
  print algType, len(errors["err_a"][algType])
  errA = np.zeros((len(noises),len(outliers)))
  errAN = np.zeros((len(noises),len(outliers)))
  errT = np.zeros((len(noises),len(outliers)))
  for i,n in enumerate(errors["noise"]):
    o = errors["outlier"][i]
    err = errors["err_a"][algType][i]
    if not np.isnan(err):
      errA[noiseQuant[n], outlierQuant[o]] += err
      errAN[noiseQuant[n], outlierQuant[o]] += 1
  errA /= errAN

  plt.figure()
  for i,o in enumerate(outliers):
    plt.plot(noises/0.1, errA[:,i], label="{}".format(o))
  plt.legend(loc="best")

  errA = errA[::-1,:]
  plt.figure()
  plt.imshow(errA, interpolation="nearest", extent=[noises.min(), noises.max(), outliers.min(), outliers.max()])
  plt.colorbar()
plt.show()

for yMetric in ["noise", "outlier"]:
  fig = plt.figure(figsize = figSize, dpi = 80, facecolor="w",
      edgecolor="k")
  axs = []
  print yMetric
  for i,algType in enumerate(algTypes):
    for j,errType in enumerate(errTypes):
      if j == 0:
        axs.append(plt.subplot(len(errTypes),len(algTypes), i+len(algTypes)*j+1))
      else:
        axs.append(plt.subplot(len(errTypes),len(algTypes),
            i+len(algTypes)*j+1, sharex=axs[-1] ))
      plt.ylim([0, errTypeMax[errType]])
      axs[-1].yaxis.grid(True, linestyle='-', which='major',
          color='lightgrey', alpha=0.5, linewidth=2)
      axs[-1].set_axisbelow(True) # hide grey lines behind plot
      errs = errors[errType][algType]
      errs = np.array(errs)
      errs = errs[np.logical_not(np.isnan(errs))]
      ids = np.where(errs < errTypeMax[errType])
  #      PlotErrDensity(np.array(errors[yMetric])[ids], errs[ids],
  #          yMetricResolution[yMetric], errTypeMax[errType],
  #          errTypeResolution[errType], axs[-1], j==len(errTypes)-1)
      print errType
      TableErr(np.array(errors[yMetric])[ids], errs[ids],
          yMetricResolution[yMetric])
      PlotErrBoxPlot(np.array(errors[yMetric])[ids], errs[ids],
          yMetricResolution[yMetric], axs[-1], j==len(errTypes)-1)
#      PlotScatter(np.array(errors[yMetric])[ids], errs[ids],
#          yMetricResolution[yMetric], axs[-1], j==len(errTypes)-1)
      if j == 0 and yMetric=="overlap":
        if algType in algDesc:
          plt.title(algDesc[algType])
        else:
          plt.title(algType)
      if j == len(errTypes)-1:
        plt.xlabel(yMetricLabel[yMetric])
      if i == 0:
        plt.ylabel(errDesc[errType])
      if i>0:
        plt.setp(axs[-1].get_yticklabels(), visible=False)
      if i==0 and j==1:
        axs[-1].set_yticks(axs[-1].get_yticks()[:-1])
  plt.tight_layout(pad=0.4, w_pad=0.5, h_pad=0.1)
  plt.savefig("deviation_"+yMetric+"_N_{}_".format(counter)+"_".join(algTypes)+"_results.png", figure=fig)
  plt.show()

import sys
sys.exit(0)

for errType in errTypes:
  print errType
  fig = plt.figure()
  # overlap
  plt.subplot(3,2,1)
  for algType, errs in errors[errType].iteritems():
    ids = np.where(np.array(errs) < errTypeMax[errType])
    plt.plot(np.array(errors["overlap"])[ids], np.array(errs)[ids], '.', label=algType)
    print "  ", algType, errs
  plt.legend()
  plt.xlabel("overlap [%]")
  plt.ylabel(errDesc[errType])
  plt.ylim([0, errTypeMax[errType]])
  plt.subplot(3,2,2)
  for algType, errs in errors[errType].iteritems():
    ids = np.where(np.array(errs) < errTypeMax[errType])
    PlotErrHist(np.array(errors["overlap"])[ids], np.array(errs)[ids],
        5.)
  plt.legend()
  plt.xlabel("overlap [%]")
  plt.ylabel(errDesc[errType])
  plt.ylim([0, errTypeMax[errType]])
  # dangle
  plt.subplot(3,2,3)
  for algType, errs in errors[errType].iteritems():
    ids = np.where(np.array(errs) < errTypeMax[errType])
    plt.plot(np.array(errors["dangle"])[ids], np.array(errs)[ids], '.', label=algType)
  plt.legend()
  plt.xlabel("delta angle [deg]")
  plt.ylabel(errDesc[errType])
  plt.ylim([0, errTypeMax[errType]])
  plt.subplot(3,2,4)
  for algType, errs in errors[errType].iteritems():
    ids = np.where(np.array(errs) < errTypeMax[errType])
    PlotErrHist(np.array(errors["dangle"])[ids], np.array(errs)[ids], 10.)
  plt.legend()
  plt.xlabel("delta angle [deg]")
  plt.ylabel(errDesc[errType])
  plt.ylim([0, errTypeMax[errType]])
  # dtranslation
  plt.subplot(3,2,5)
  for algType, errs in errors[errType].iteritems():
    ids = np.where(np.array(errs) < errTypeMax[errType])
    plt.plot(np.array(errors["dtranslation"])[ids], np.array(errs)[ids], '.', label=algType)
  plt.legend()
  plt.xlabel("delta translation [m]")
  plt.ylabel(errDesc[errType])
  plt.ylim([0, errTypeMax[errType]])
  plt.subplot(3,2,6)
  for algType, errs in errors[errType].iteritems():
    ids = np.where(np.array(errs) < errTypeMax[errType])
    PlotErrHist(np.array(errors["dtranslation"])[ids],
        np.array(errs)[ids], 0.5)
  plt.legend()
  plt.xlabel("delta translation [m]")
  plt.ylabel(errDesc[errType])
  plt.ylim([0, errTypeMax[errType]])
plt.show()
