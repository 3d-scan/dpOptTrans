import numpy as np
import os.path
import json, re, argparse, sys
import matplotlib as mpl
import matplotlib.pyplot as plt
from js.utils.plot.colors import colorScheme

mpl.rc('font',size=30) 
mpl.rc('lines',linewidth=3.)
figSize = (14, 5.5)
figSize = (12, 8)
figSize = (20, 8)
figSize = (14, 10)
c1 = colorScheme("labelMap")["turquoise"]
c2 = colorScheme("labelMap")["orange"]
c3 = colorScheme("labelMap")["red"]
colors = colorScheme("label")

parser = argparse.ArgumentParser(description = 'plot results from results.json files generated by randomRenderAndCompare.py')
parser.add_argument('-i','--input',
    default="/data/vision/fisher/expres1/jstraub/optRotTransCVPR2017_bunny/", help='path to results folder')
#    default="/media/jstraub/research/dpOptTrans/", help='path to results folder')
#    default="/home/jstraub/CloudStation/research/dpOptTrans/", help='path to results folder')
#    default="../optRotTrans/", help='path to results folder')
cmdArgs = parser.parse_args()

name = "[a-z_0-9]+_[0-9]+_results.json"

results = []
for root, dirs, files in os.walk(cmdArgs.input):
  for f in files:
    if re.search(name, f):    
      results.append(os.path.join(root,f))
  break # don recurse into subfolders

version = "4.3"
version = "4.2"
version = "4.4"
version = "4.5"
scale = 2*0.1 # roughly the diameter to bound the bunny

errors = {"err_a":{}, "err_t":{}, "dt":{}, "Ks":{}, "overlap":[], "dangle":[],
    "noise":[], "outlier":[],
  "dtranslation":[]}
errTypes = ["err_a", "err_t", "dt", "Ks"]
counter = 0
numRejected = dict()
for result in results:
  r = json.load(open(result))
  if r['version'] == version:
#    print result
#    print r
    errors["overlap"].append(r['GT']['overlap'])
    errors["noise"].append(r['GT']['noiseStd'])
    errors["outlier"].append(r['GT']['outlier'])
#    dang = 2.*np.arccos(r['GT']['q'][0]) *180/np.pi
#    errors["dangle"].append(dang)
#    errors["dtranslation"].append(np.sqrt((np.array(r['GT']['t'])**2).sum()))
    errors["dangle"].append(r['GT']['dangle'])
    errors["dtranslation"].append(r['GT']['dtranslation'])
    # enforce that all values of one scene be non nan
#    isnotnan = True
#    for algKey, val in r.iteritems():
#      if not algKey in ["GT", "version", "ICP"]:
#        for i,typ in enumerate(errTypes):
#          if not typ in val:
#            continue
#          isnotnan = isnotnan and (not np.isnan(val[typ]).any())
#          if np.isnan(val[typ]).any():
#            if algKey in numRejected:
#              numRejected[algKey] += 1
#            else:
#              numRejected[algKey] = 1
#    if not isnotnan:
#      continue
    # collect the values
    for algKey, val in r.iteritems():
      if not algKey in ["GT", "version"]:
        for typ in errTypes:
          if not typ in val:
            continue
          if algKey in errors[typ]:
            errors[typ][algKey].append(val[typ])
          else:
            errors[typ][algKey] = [val[typ]]
    counter += 1 
#    if counter > 100:
#      break
totalRejected = 0
for key,val in numRejected.iteritems():
  totalRejected += val
print "Found {} valid and {} invalid result files. Found the following breakdown of invalid files:".format(counter, totalRejected)
for key,val in numRejected.iteritems():
  print "  {}: \t{}\t{}%".format(key, val, 100.*val/float(totalRejected+counter))

print "have the following algorithms: "
for key in errors["err_a"].iterkeys():
  print "  ", key

if counter == 0:
  print "No results found for version "+version
  sys.exit(0)

errDesc = {"err_a":"$\Delta \\theta$ [deg]", 
    "err_t": "$\|\|\Delta t\|\|_2$", "dt":"dt [s]",
    "Ks1":"Ks", "Ks2":"Ks", "Ks3":"Ks", "Ks4":"Ks"}
errTypeMax = {"err_a": 90., "err_t": 0.2, "dt": 120.,
    "Ks1":30, "Ks2":30, "Ks3":30, "Ks4":30}
yMetricLabel={"overlap":"overlap [%]", "noise":"noise",
  "outlier":"outlier", "dangle":" $\Delta\\theta_{GT}$ [deg]",
  "dtranslation":"$\|\|\Delta t_{GT}\|\|_2$"}
yMetricResolution={"overlap":9, "dangle":8, "dtranslation":0.4}
yMetricResolution={"overlap":15, "dangle":12, "dtranslation":0.4, 
    "noise":1., "outlier":0.1}
#yMetricResolution={"overlap":15, "dangle":12, "dtranslation":0.4}

# eval of all algos against eachother
errTypes = ["err_a", "err_t"] #, "dt"]
algTypes = ["BB", "BB+ICP"]

if not "DISPLAY" in os.environ:
  sys.exit(0)

print algTypes
print errTypes

print len(errors["err_a"]["BB"])
print len(errors["noise"])

stdThr = 0.005

noises = np.sort(np.unique([noise for noise in errors["noise"] if noise < stdThr]))
noiseQuant = {}
for i,n in enumerate(noises):
  noiseQuant[n] = i
outliers = np.sort(np.unique(errors["outlier"]))
outlierQuant = {}
for i,o in enumerate(outliers):
  outlierQuant[o] = i
print "noises", noises
print outliers

for errType in errTypes+["num"]:
  for algType in ["BB+ICP"]:
    err25 = np.zeros((len(noises),len(outliers)))
    err50 = np.zeros((len(noises),len(outliers)))
    err75 = np.zeros((len(noises),len(outliers)))
    err90 = np.zeros((len(noises),len(outliers)))
    errMean = np.zeros((len(noises),len(outliers)))
    errStd = np.zeros((len(noises),len(outliers)))
    for i,o in enumerate(outliers):
      for j,n in enumerate(noises):
        if errType == "num":
          for l,ni in enumerate(errors["noise"]):
            oi = errors["outlier"][l]
            if oi ==o and ni ==n :
              errMean[j,i] += 1
        else:
          data = []
          for l,ni in enumerate(errors["noise"]):
            oi = errors["outlier"][l]
            if oi ==o and ni ==n :
              data.append(errors[errType][algType][l])
          err50[j,i] = np.median(data) 
          err25[j,i] = np.percentile(data,25) 
          err75[j,i] = np.percentile(data,75) 
          err90[j,i] = np.percentile(data,90) 
          errMean[j,i] = np.mean(data) 
          errStd[j,i] = np.std(data) 
    fig = plt.figure(figsize = figSize, dpi = 80, facecolor="w", edgecolor="k")
    for i,o in enumerate([outliers[0],outliers[2]]):
      plt.plot(noises/scale, err50[:,i], '--', color=colors[i%len(colors)])
#      plt.plot(noises/scale, err25[:,i], color=colors[i%len(colors)])
#      plt.plot(noises/scale, err75[:,i], color=colors[i%len(colors)])
#      plt.plot(noises/scale, err90[:,i], '-.', color=colors[i%len(colors)])
#      plt.plot(noises/scale, err75[:,i], '-.', color=colors[i%len(colors)])
      plt.plot(noises/scale, errMean[:,i], label="{:.0%} outliers".format(o),color=colors[i%len(colors)])
      plt.fill_between(noises/scale, np.maximum(errMean[:,i]-errStd[:,i],np.zeros_like(errStd[:,i])),
        errMean[:,i]+errStd[:,i], alpha=0.3, color=colors[i%len(colors)])

    plt.legend(loc="best")
    plt.xlabel("noise std")
    plt.xlim([0, noises.max()/scale])
    if not errType == "num":
      plt.ylabel(errDesc[errType])
#    else:
#      plt.xticks([])
#      plt.yticks([])
    plt.tight_layout()
    plt.savefig("errorPltNoiseOutlier_{}_{}_results.png".format(errType,algType), figure=fig)
plt.show()

