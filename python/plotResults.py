import numpy as np
import os.path
import json, re, argparse

parser = argparse.ArgumentParser(description = 'plot results from results.json files generated by randomRenderAndCompare.py')
parser.add_argument('-i','--input',
    default="../optRotTrans/", help='path to results folder')
cmdArgs = parser.parse_args()

name = "[a-z_0-9]+_[0-9]+_results.json"

results = []
for root, dirs, files in os.walk(cmdArgs.input):
  for f in files:
    if re.search(name, f):    
      print f
      results.append(os.path.join(root,f))

version = "1.1"
errors = {"err_a":{}, "err_t":{}, "overlap":[], "dangle":[],
  "dtranslation":[]}
errTypes = ["err_a", "err_t"]
for result in results:
  r = json.load(open(result))
  if r['version'] == version:
    errors["overlap"].append(r['GT']['overlap'])
    dang = 2.*np.arccos(r['GT']['q'][0]) *180/np.pi
    errors["dangle"].append(dang)
    errors["dtranslation"].append(np.sqrt((np.array(r['GT']['t'])**2).sum()))
    for algKey, val in r.iteritems():
      if not algKey in ["GT", "version"]:
        for typ in errTypes:
          if algKey in errors[typ]:
            errors[typ][algKey].append(val[typ])
          else:
            errors[typ][algKey] = [val[typ]]

import matplotlib.pyplot as plt

errDesc = {"err_a":"angular deviation [deg]", 
  "err_t": "translational deviation [m]"}

def PlotErrHist(x, y, delta):
  if x.size < 1:
    return
  ids = np.floor((x)/delta).astype(np.int)
  means = np.zeros(ids.max()+1)
  stds = np.zeros(ids.max()+1)
  data = []
  for i in range(ids.min(), ids.max()+1):
    if (ids==i).any():
      means[i] = np.mean(y[ids==i])
      stds[i] = np.std(y[ids==i])
      data.append(y[ids==i])
  plt.errorbar(np.arange(ids.max()+1)*delta,means,yerr=stds)

def PlotErrBoxPlot(x, y, delta, ax):
  if x.size < 1:
    return
  ids = np.floor((x)/delta).astype(np.int)
  data = []
  for i in range(ids.min(), ids.max()+1):
    if (ids==i).any():
      data.append(y[ids==i])
  plt.boxplot(data)
  xtickNames = plt.setp(ax, xticklabels=np.floor(np.arange(ids.min(),
    ids.max()+1)*delta))
  plt.setp(xtickNames, rotation=45, fontsize=8)

errTypeMax = {"err_a": 360., "err_t": 10.}
algTypes = ["BB", "BB+ICP", "ICP", "MM", "MM+ICP"]
yMetricLabel={"overlap":"overlap [%]", "dangle":"delta angle [deg]",
"dtranslation":"delta translation [m]"}
yMetricResolution={"overlap":5, "dangle":10,
"dtranslation":0.3}


for yMetric in ["overlap", "dangle", "dtranslation"]:
  fig = plt.figure()
  axs = []
  for i,algType in enumerate(algTypes):
    for j,errType in enumerate(errTypes):
      if j == 0:
        axs.append(plt.subplot(len(errTypes),len(algTypes),
          i+len(algTypes)*j+1))
      else:
        axs.append(plt.subplot(len(errTypes),len(algTypes),
            i+len(algTypes)*j+1, sharex=axs[-1] ))
      errs = errors[errType][algType]
      ids = np.where(np.array(errs) < errTypeMax[errType])
      PlotErrBoxPlot(np.array(errors[yMetric])[ids], np.array(errs)[ids],
          yMetricResolution[yMetric], axs[-1])
      if j == 0:
        plt.title(algType)
      if j == len(errTypes)-1:
        plt.xlabel(yMetricLabel[yMetric])
      if i == 0:
        plt.ylabel(errDesc[errType])
#    plt.ylim([0, errTypeMax[errType]])
  plt.tight_layout()
  plt.show()

for errType in errTypes:
  print errType
  fig = plt.figure()
  # overlap
  plt.subplot(3,2,1)
  for algType, errs in errors[errType].iteritems():
    ids = np.where(np.array(errs) < errTypeMax[errType])
    plt.plot(np.array(errors["overlap"])[ids], np.array(errs)[ids], '.', label=algType)
    print "  ", algType, errs
  plt.legend()
  plt.xlabel("overlap [%]")
  plt.ylabel(errDesc[errType])
  plt.ylim([0, errTypeMax[errType]])
  plt.subplot(3,2,2)
  for algType, errs in errors[errType].iteritems():
    ids = np.where(np.array(errs) < errTypeMax[errType])
    PlotErrHist(np.array(errors["overlap"])[ids], np.array(errs)[ids],
        5.)
  plt.legend()
  plt.xlabel("overlap [%]")
  plt.ylabel(errDesc[errType])
  plt.ylim([0, errTypeMax[errType]])
  # dangle
  plt.subplot(3,2,3)
  for algType, errs in errors[errType].iteritems():
    ids = np.where(np.array(errs) < errTypeMax[errType])
    plt.plot(np.array(errors["dangle"])[ids], np.array(errs)[ids], '.', label=algType)
  plt.legend()
  plt.xlabel("delta angle [deg]")
  plt.ylabel(errDesc[errType])
  plt.ylim([0, errTypeMax[errType]])
  plt.subplot(3,2,4)
  for algType, errs in errors[errType].iteritems():
    ids = np.where(np.array(errs) < errTypeMax[errType])
    PlotErrHist(np.array(errors["dangle"])[ids], np.array(errs)[ids], 10.)
  plt.legend()
  plt.xlabel("delta angle [deg]")
  plt.ylabel(errDesc[errType])
  plt.ylim([0, errTypeMax[errType]])
  # dtranslation
  plt.subplot(3,2,5)
  for algType, errs in errors[errType].iteritems():
    ids = np.where(np.array(errs) < errTypeMax[errType])
    plt.plot(np.array(errors["dtranslation"])[ids], np.array(errs)[ids], '.', label=algType)
  plt.legend()
  plt.xlabel("delta translation [m]")
  plt.ylabel(errDesc[errType])
  plt.ylim([0, errTypeMax[errType]])
  plt.subplot(3,2,6)
  for algType, errs in errors[errType].iteritems():
    ids = np.where(np.array(errs) < errTypeMax[errType])
    PlotErrHist(np.array(errors["dtranslation"])[ids],
        np.array(errs)[ids], 0.5)
  plt.legend()
  plt.xlabel("delta translation [m]")
  plt.ylabel(errDesc[errType])
  plt.ylim([0, errTypeMax[errType]])
plt.show()
